(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{423:function(n,s,a){"use strict";a.r(s),s.default='<p>Loads a Sass/SCSS file and compiles it to CSS.</p>\n<p>Use the <a href="/loaders/css-loader/">css-loader</a> or the <a href="/loaders/raw-loader/">raw-loader</a> to turn it into a JS module and the <a href="/plugins/mini-css-extract-plugin/">mini-css-extract-plugin</a> to extract it into a separate file.\nLooking for the webpack 1 loader? Check out the <a href="https://github.com/webpack-contrib/sass-loader/tree/archive/webpack-1">archive/webpack-1 branch</a>.</p>\n<h2 id="install">Install<a href="#install" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> sass-loader node-sass webpack --save-dev</code></pre>\n<p>The sass-loader requires <a href="https://github.com/webpack">webpack</a> as a\n<a href="https://docs.npmjs.com/files/package.json#peerdependencies"><code>peerDependency</code></a>\nand it requires you to install either <a href="https://github.com/sass/node-sass">Node Sass</a> or <a href="https://github.com/sass/dart-sass">Dart Sass</a> on your\nown. This allows you to control the versions of all your dependencies, and to\nchoose which Sass implementation to use.</p>\n<h2 id="examples">Examples<a href="#examples" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Chain the sass-loader with the <a href="/loaders/css-loader/">css-loader</a> and the <a href="/loaders/style-loader/">style-loader</a> to immediately apply all styles to the DOM.</p>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> style-loader css-loader --save-dev</code></pre>\n<pre><code class="hljs language-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token operator">...</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                <span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token comment">// creates style nodes from JS strings</span>\n                <span class="token string">"css-loader"</span><span class="token punctuation">,</span> <span class="token comment">// translates CSS into CommonJS</span>\n                <span class="token string">"sass-loader"</span> <span class="token comment">// compiles Sass to CSS, using Node Sass by default</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>You can also pass options directly to <a href="https://github.com/sass/node-sass">Node Sass</a> or <a href="http://sass-lang.com/dart-sass">Dart Sass</a>:</p>\n<pre><code class="hljs language-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token operator">...</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    includePaths<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"absolute/path/a"</span><span class="token punctuation">,</span> <span class="token string">"absolute/path/b"</span><span class="token punctuation">]</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>See <a href="https://github.com/sass/node-sass/blob/master/README.md#options">the Node Sass documentation</a> for all available Sass options.</p>\n<p>By default the loader resolve the implementation based on your dependencies.\nJust add required implementation to <code>package.json</code>\n(<code>node-sass</code> or <code>sass</code> package) and install dependencies. </p>\n<p>Example where the <code>sass-loader</code> loader uses the <code>sass</code> (<code>dart-sass</code>) implementation:</p>\n<p><strong>package.json</strong></p>\n<pre><code class="hljs language-json"><span class="token punctuation">{</span>\n   <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"sass-loader"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>\n      <span class="token property">"sass"</span><span class="token operator">:</span> <span class="token string">"*"</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p>Example where the <code>sass-loader</code> loader uses the <code>node-sass</code> implementation:</p>\n<p><strong>package.json</strong></p>\n<pre><code class="hljs language-json"><span class="token punctuation">{</span>\n   <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"sass-loader"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>\n      <span class="token property">"node-sass"</span><span class="token operator">:</span> <span class="token string">"*"</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p>Beware the situation\nwhen <code>node-sass</code> and <code>sass</code> was installed, by default the <code>sass-loader</code>\nprefers <code>node-sass</code>, to avoid this situation use the <code>implementation</code> option. </p>\n<p>The special <code>implementation</code> option determines which implementation of Sass to\nuse. It takes either a <a href="https://github.com/sass/node-sass">Node Sass</a> or a <a href="http://sass-lang.com/dart-sass">Dart Sass</a> module. For example, to\nuse Dart Sass, you\'d pass:</p>\n<pre><code class="hljs language-js"><span class="token comment">// ...</span>\n    <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            implementation<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sass"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token comment">// ...</span></code></pre>\n<p>Note that when using Dart Sass, <strong>synchronous compilation is twice as fast as\nasynchronous compilation</strong> by default, due to the overhead of asynchronous\ncallbacks. To avoid this overhead, you can use the\n<a href="https://www.npmjs.com/package/fibers"><code>fibers</code></a> package to call asynchronous\nimporters from the synchronous code path. To enable this, pass the <code>Fiber</code> class\nto the <code>fiber</code> option:</p>\n<pre><code class="hljs language-js"><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> Fiber <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fibers\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token operator">...</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    implementation<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sass"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    fiber<span class="token punctuation">:</span> Fiber\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="in-production">In production<a href="#in-production" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Usually, it\'s recommended to extract the style sheets into a dedicated file in production using the <a href="/plugins/mini-css-extract-plugin/">mini-css-extract-plugin</a>. This way your styles are not dependent on JavaScript:</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token operator">...</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                <span class="token comment">// fallback to style-loader in development</span>\n                process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">\'production\'</span> <span class="token operator">?</span> <span class="token string">\'style-loader\'</span> <span class="token punctuation">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>\n                <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n                <span class="token string">"sass-loader"</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token comment">// Options similar to the same options in webpackOptions.output</span>\n            <span class="token comment">// both options are optional</span>\n            filename<span class="token punctuation">:</span> <span class="token string">"[name].css"</span><span class="token punctuation">,</span>\n            chunkFilename<span class="token punctuation">:</span> <span class="token string">"[id].css"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="usage">Usage<a href="#usage" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<h3 id="imports">Imports<a href="#imports" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>webpack provides an <a href="/concepts/module-resolution/">advanced mechanism to resolve files</a>. The sass-loader uses Sass\'s custom importer feature to pass all queries to the webpack resolving engine. Thus you can import your Sass modules from <code>node_modules</code>. Just prepend them with a <code>~</code> to tell webpack that this is not a relative import:</p>\n<pre><code class="hljs language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"~bootstrap/dist/css/bootstrap"</span><span class="token punctuation">;</span></span></code></pre>\n<p>It\'s important to only prepend it with <code>~</code>, because <code>~/</code> resolves to the home directory. webpack needs to distinguish between <code>bootstrap</code> and <code>~bootstrap</code> because CSS and Sass files have no special syntax for importing relative files. Writing <code>@import "file"</code> is the same as <code>@import "./file";</code></p>\n<h3 id="problems-with-url">Problems with <code>url(...)</code><a href="#problems-with-url" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Since Sass/<a href="https://github.com/sass/libsass">libsass</a> does not provide <a href="https://github.com/sass/libsass/issues/532">url rewriting</a>, all linked assets must be relative to the output.</p>\n<ul>\n<li>If you\'re just generating CSS without passing it to the css-loader, it must be relative to your web root.</li>\n<li>If you pass the generated CSS on to the css-loader, all urls must be relative to the entry-file (e.g. <code>main.scss</code>).</li>\n</ul>\n<p>More likely you will be disrupted by this second issue. It is natural to expect relative references to be resolved against the <code>.scss</code> file in which they are specified (like in regular <code>.css</code> files). Thankfully there are a two solutions to this problem:</p>\n<ul>\n<li>Add the missing url rewriting using the <a href="https://github.com/bholloway/resolve-url-loader">resolve-url-loader</a>. Place it before the sass-loader in the loader chain.</li>\n<li>Library authors usually provide a variable to modify the asset path. <a href="https://github.com/twbs/bootstrap-sass">bootstrap-sass</a> for example has an <code>$icon-font-path</code>. Check out <a href="https://github.com/webpack-contrib/sass-loader/tree/master/test/bootstrapSass">this working bootstrap example</a>.</li>\n</ul>\n<h3 id="extracting-style-sheets">Extracting style sheets<a href="#extracting-style-sheets" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Bundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or <a href="/concepts/hot-module-replacement/">hot module replacement</a> in development. In production, on the other hand, it\'s not a good idea to apply your style sheets depending on JS execution. Rendering may be delayed or even a <a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content">FOUC</a> might be visible. Thus it\'s often still better to have them as separate files in your final production build.</p>\n<p>There are two possibilities to extract a style sheet from the bundle:</p>\n<ul>\n<li><a href="https://github.com/peerigon/extract-loader">extract-loader</a> (simpler, but specialized on the css-loader\'s output)</li>\n<li><a href="/plugins/mini-css-extract-plugin/">mini-css-extract-plugin</a> (use this, when using webpack 4 configuration. Works in all use-cases)</li>\n</ul>\n<h3 id="source-maps">Source maps<a href="#source-maps" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>To enable CSS source maps, you\'ll need to pass the <code>sourceMap</code> option to the sass-loader <em>and</em> the css-loader. Your <code>webpack.config.js</code> should look like this:</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    devtool<span class="token punctuation">:</span> <span class="token string">"source-map"</span><span class="token punctuation">,</span> <span class="token comment">// any "source-map"-like devtool is possible</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>If you want to edit the original Sass files inside Chrome, <a href="https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0">there\'s a good blog post</a>. Checkout <a href="https://github.com/webpack-contrib/sass-loader/tree/master/test">test/sourceMap</a> for a running example.</p>\n<h3 id="environment-variables">Environment variables<a href="#environment-variables" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>If you want to prepend Sass code before the actual entry file, you can set the <code>data</code> option. In this case, the sass-loader will not override the <code>data</code> option but just append the entry\'s content. This is especially useful when some of your Sass variables depend on the environment:</p>\n<pre><code class="hljs language-javascript"><span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        data<span class="token punctuation">:</span> <span class="token string">"$env: "</span> <span class="token operator">+</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">+</span> <span class="token string">";"</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p>The <code>data</code> option supports <code>Function</code> notation:</p>\n<pre><code class="hljs language-javascript"><span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        data<span class="token punctuation">:</span> <span class="token punctuation">(</span>loaderContext<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          <span class="token comment">// More information about avalaible options https://webpack.js.org/api/loaders/</span>\n          <span class="token keyword">const</span> <span class="token punctuation">{</span> resourcePath<span class="token punctuation">,</span> rootContext <span class="token punctuation">}</span> <span class="token operator">=</span> loaderContext<span class="token punctuation">;</span>\n          <span class="token keyword">const</span> relativePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">,</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          \n          <span class="token keyword">if</span> <span class="token punctuation">(</span>relativePath <span class="token operator">===</span> <span class="token string">"styles/foo.scss"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n             <span class="token keyword">return</span> <span class="token string">"$value: 100px;"</span>\n          <span class="token punctuation">}</span>\n          \n          <span class="token keyword">return</span> <span class="token string">"$value: 200px;"</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p><strong>Please note:</strong> Since you\'re injecting code, this will break the source mappings in your entry file. Often there\'s a simpler solution than this, like multiple Sass entry files.</p>\n<h2 id="maintainers">Maintainers<a href="#maintainers" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<table>\n    <tr>\n      <td align="center">\n        <a href="https://github.com/jhnns"><img width="150" height="150" src="https://avatars0.githubusercontent.com/u/781746?v=3"></a><br>\n        <a href="https://github.com/jhnns">Johannes Ewald</a>\n      </td>\n      <td align="center">\n        <a href="https://github.com/webpack-contrib"><img width="150" height="150" src="https://avatars1.githubusercontent.com/u/1243901?v=3&s=460"></a><br>\n        <a href="https://github.com/webpack-contrib">Jorik Tangelder</a>\n      </td>\n      <td align="center">\n        <a href="https://github.com/akiran"><img width="150" height="150" src="https://avatars1.githubusercontent.com/u/3403295?v=3"></a><br>\n        <a href="https://github.com/akiran">Kiran</a>\n      </td>\n    <tr>\n</table>\n<h2 id="license">License<a href="#license" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><a href="http://www.opensource.org/licenses/mit-license.php">MIT</a></p>\n'}}]);